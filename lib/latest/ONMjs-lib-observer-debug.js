// Generated by CoffeeScript 1.4.0

/*

  http://schema.encapsule.org/schema.html

  A single-page HTML5 application for creating, visualizing, and editing
  JSON-encoded Soft Circuit Description Language (SCDL) models.

  Copyright 2013 Encapsule Project, Copyright 2013 Chris Russell

  Distributed under the terms of the Boost Software License Version 1.0
  See included license.txt or http://www.boost.org/LICENSE_1_0.txt

  Sources on GitHub: https://github.com/Encapsule-Project/schema

  Visit http://www.encapsule.org for more information and happy hacking.
*/


(function() {
  var ONMjs, namespaceEncapsule;

  window.Console = (function() {

    function Console() {}

    Console.init = function() {
      var consoleEl;
      consoleEl = $("#idConsole");
      if (!(consoleEl != null) || !consoleEl) {
        throw "Unable to resolve the #idConsole DIV.";
      }
      if ((Encapsule.runtime.app.SchemaWindowManager != null) && Encapsule.runtime.app.SchemaWindowManager) {
        consoleEl.html("reset");
        Encapsule.runtime.app.SchemaWindowManager.refreshWindowManagerViewState({
          forceEval: true
        });
      }
      consoleEl.html("<div id=\"idClearConsole\" style=\"float: right;\">\n    <button id=\"idButtonClearConsole\" class=\"button red small\">Reset Console</button>\n    <button id=\"idButtonHideConsole\" class=\"button blue small\">Hide Console</button>\n</div>\n<img src=\"img/core-seablue-48x48.png\" style=\"float:left; margin-right: 10px;\">\n<h1>" + appName + " v" + appVersion + "</h1>\n<div style=\"clear: both;\"></div>\n<p>\n    <strong>Copyright:</strong> " + appCopyright + " &bull;\n    <strong>License:</strong> <a href=\"" + appLicenseUrl + "\" title=\"Read the " + appLicense + " text...\" target=\"_blank\">" + appLicense + "</a> &bull;\n    <strong>Sources:</strong> <a href=\"" + appGitHubRepoUrl + "\" title=\"" + appGitHubRepoName + " repo on GitHub\" target=\"_blank\">" + appGitHubRepoName + "</a>\n</p>\n<p>\nBuild: {" + appBuildId + "}  " + appBuildTime + " by <a href=\"mailto:" + appBuilder + "\">" + appBuilder + "</a>\n</p>");
      $("#idButtonClearConsole").click(function() {
        consoleEl = $("#idConsole").css({
          backgroundColor: "#CCCCCC"
        });
        Console.init();
        return Console.message("Console re-initialized.");
      });
      return $("#idButtonHideConsole").click(function() {
        return Console.hide();
      });
    };

    Console.opacity = function(opacity_) {
      var consoleEl;
      consoleEl = $("#idConsole");
      return consoleEl.css({
        opacity: "" + opacity_
      });
    };

    Console.show = function() {
      var consoleEl;
      consoleEl = $("#idConsole");
      if ((consoleEl != null) && consoleEl) {
        return consoleEl.hide(0, function() {
          Console.opacity(1.0);
          return consoleEl.show(500);
        });
      }
    };

    Console.hide = function() {
      var consoleEl;
      consoleEl = $("#idConsole");
      if ((consoleEl != null) && consoleEl) {
        return consoleEl.hide(500, function() {
          Console.opacity(0.0);
          if ((Encapsule.runtime.app.SchemaWindowManager != null) && Encapsule.runtime.app.SchemaWindowManager) {
            return Encapsule.runtime.app.SchemaWindowManager.refreshWindowManagerViewState({
              forceEval: true
            });
          }
        });
      }
    };

    Console.log = function(trace) {
      Console.message(trace);
      if ((typeof console !== "undefined" && console !== null) && console && (console.log != null) && console.log) {
        return console.log(trace);
      }
    };

    Console.message = function(trace) {
      Console.messageStart(trace);
      return Console.messageEnd("");
    };

    Console.messageRaw = function(trace) {
      var consoleEl;
      consoleEl = $("#idConsole");
      return consoleEl.append(trace);
    };

    Console.messageStart = function(trace) {
      return Console.messageRaw("> " + trace);
    };

    Console.messageEnd = function(trace) {
      return Console.messageRaw("" + trace + "<br>");
    };

    Console.messageError = function(errorException) {
      var blipper, consoleEl, errorMessage;
      errorMessage = "<h2 style=\"color: #990000;\">" + appName + " Runtime Exception</h2>\n<div class=\"classConsoleExceptionContainer\">\n    <h3 style=\"color: #660000\">" + appName + " v" + appVersion + " RUNTIME EXCEPTION:</h3>\n    <h4>AppID: " + appId + " &bull; ReleaseID: " + appReleaseId + " &bull; AppBuildID: " + appBuildId + "</h4>\n    <div style=\"margin: 5px; margin-top-15px; padding: 10px; background-color: #FF9900; border: 1px solid black;\">" + errorException + "</div>\n</div>";
      Console.messageRaw(errorMessage);
      Console.log("!!!! " + errorException);
      consoleEl = $("#idConsole");
      consoleEl.show();
      consoleEl.css({
        opacity: "1.0",
        backgroundColor: "#FFCC00"
      });
      Encapsule.runtime.boot.phase0.spinner.cancel();
      if ((typeof Encapsule !== "undefined" && Encapsule !== null) && (Encapsule.runtime != null) && (Encapsule.runtime.boot != null) && (Encapsule.runtime.boot.phase0 != null) && (Encapsule.runtime.boot.phase0.blipper != null)) {
        blipper = Encapsule.runtime.boot.phase0.blipper;
        blipper.blip("22a");
        return blipper.blip("warning");
      }
    };

    return Console;

  }).call(this);

  /*
  
    http://schema.encapsule.org/
  
    A single-page HTML5 application for creating, visualizing, and editing
    JSON-encoded Soft Circuit Description Language (SCDL) models.
  
    Copyright 2013 Encapsule Project, Copyright 2013 Chris Russell
  
    Distributed under the terms of the Boost Software License Version 1.0
    See included license.txt or http://www.boost.org/LICENSE_1_0.txt
  
    Sources on GitHub: https://github.com/Encapsule-Project/schema
  
    Visit http://www.encapsule.org for more information and happy hacking.
  */


  ko.bindingHandlers.editableText = {
    init: function(element, valueAccessor) {
      return $(element).on('blur', function() {
        var observable;
        observable = valueAccessor();
        return observable($(this).text());
      });
    },
    update: function(element, valueAccessor) {
      var value;
      value = ko.utils.unwrapObservable(valueAccessor());
      return $(element).text(value);
    }
  };

  /*
  
    http://schema.encapsule.org/schema.html
  
    A single-page HTML5 application for creating, visualizing, and editing
    JSON-encoded Soft Circuit Description Language (SCDL) models.
  
    Copyright 2013 Encapsule Project, Copyright 2013 Chris Russell
  
    Distributed under the terms of the Boost Software License Version 1.0
    See included license.txt or http://www.boost.org/LICENSE_1_0.txt
  
    Sources on GitHub: https://github.com/Encapsule-Project/schema
  
    Visit http://www.encapsule.org for more information and happy hacking.
  */


  namespaceEncapsule = (typeof Encapsule !== "undefined" && Encapsule !== null) && Encapsule || (this.Encapsule = {});

  Encapsule.code = (Encapsule.code != null) && Encapsule.code || (this.Encapsule.code = {});

  Encapsule.code.lib = (Encapsule.code.lib != null) && Encapsule.code.lib || (this.Encapsule.code.lib = {});

  Encapsule.code.lib.kohelpers = (Encapsule.code.lib.kohelpers != null) && Encapsule.code.lib.kohelpers || (this.Encapsule.code.lib.kohelpers = {});

  Encapsule.runtime = (Encapsule.runtime != null) && Encapsule.runtime || (this.Encapsule.runtime = {});

  Encapsule.runtime.app = (Encapsule.runtime.app != null) && Encapsule.runtime.app || (this.Encapsule.runtime.app = {});

  Encapsule.runtime.app.kotemplates = (Encapsule.runtime.app.kotemplates != null) && Encapsule.runtime.app.kotemplates || (this.Encapsule.runtime.app.kotemplates = []);

  Encapsule.code.lib.kohelpers.RegisterKnockoutViewTemplate = function(selectorId_, fnHtml_) {
    var koTemplate;
    try {
      if (!(selectorId_ != null) || !selectorId_ || !(fnHtml_ != null) || !fnHtml_) {
        throw "RegisterKnockoutViewTemplate bad parameter(s)";
      }
      koTemplate = {
        selectorId_: selectorId_,
        fnHtml_: fnHtml_
      };
      Encapsule.runtime.app.kotemplates.push(koTemplate);
      return true;
    } catch (exception) {
      throw "RegisterKnockoutViewTemplate selectorId=" + selectorId_ + " : " + exception;
    }
  };

  Encapsule.code.lib.kohelpers.InstallKnockoutViewTemplate = function(descriptor_, parentEl_) {
    var htmlViewTemplate, koTemplateJN, selector;
    try {
      if (!(parentEl_ != null) || !parentEl_) {
        throw "Invalid parent element parameter.";
      }
      if (!(descriptor_ != null) || !descriptor_) {
        throw "Invalid descriptor parameter.";
      }
      if (!(descriptor_.selectorId_ != null) || !descriptor_.selectorId_) {
        throw "Invalid descriptor.selectorId_ parameter.";
      }
      if (!(descriptor_.fnHtml_ != null) || !descriptor_.fnHtml_) {
        throw "Invalid descriptor.fnHtml_ parameter.";
      }
      selector = "#" + descriptor_.selectorId_;
      koTemplateJN = $(selector);
      if (koTemplateJN.length === 1) {
        throw "Duplicate Knockout.js HTML view template registration. id=\"" + descriptor_.selectorId_ + "\"";
      }
      htmlViewTemplate = void 0;
      try {
        htmlViewTemplate = descriptor_.fnHtml_();
      } catch (exception) {
        throw "While evaluating the " + descriptor_.selectorId_ + " HTML callback: " + exception;
      }
      parentEl_.append($("<script type=\"text/html\" id=\"" + descriptor_.selectorId_ + "\">" + htmlViewTemplate + "</script>"));
      return true;
    } catch (exception) {
      throw "InstallKnockoutViewTemplate for descriptor " + descriptor_.selectorId_ + " : " + exception;
    }
  };

  Encapsule.code.lib.kohelpers.InstallKnockoutViewTemplates = function(windowManagerId_) {
    var descriptor, templateCacheEl, windowManagerHtmlViewBinding, windowManagerHtmlViewRootDocumentElement, _i, _len, _ref;
    if (!(windowManagerId_ != null) || !windowManagerId_) {
      throw "InstallKnockoutViewTemplates missing windowManagerId parameter.";
    }
    try {
      windowManagerHtmlViewBinding = "<!-- BEGIN: \\ ENCAPSULE PROJECT WINDOW MANAGER HOST -->\n<span id=\"idEncapsuleWindowManagerHost\">\n    <!-- BEGIN: \\ WINDOW MANAGER MODEL VIEW TEMPLATES -->\n    <span id=\"idEncapsuleWindowManagerViewTemplateCache\"></span>\n    <!-- END: / WINDOW MANAGER MODEL VIEW TEMPLATES -->\n    <!-- BEGIN: \\ ENCAPSULE PROJECT WINDOW MANAGER HOST VIEW MODEL -->\n    <span id=\"idEncapsuleWindowManager\" data-bind=\"template: { name: 'idKoTemplate_EncapsuleWindowManager' }\"></span>\n    <!-- END: / ENCAPSULE PROJECT WINDOW MANAGER HOST VIEW MODEL -->\n</span>\n<!-- END: / ENCAPSULE PROJECT WINDOW MANAGER HOST -->";
      $("body").append($(windowManagerHtmlViewBinding));
      templateCacheEl = $("#idEncapsuleWindowManagerViewTemplateCache");
      windowManagerHtmlViewRootDocumentElement = $("#idEncapsuleWindowManager");
      _ref = Encapsule.runtime.app.kotemplates;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        descriptor = _ref[_i];
        Console.message("Window manager caching view template: " + descriptor.selectorId_);
        Encapsule.code.lib.kohelpers.InstallKnockoutViewTemplate(descriptor, templateCacheEl);
      }
      return windowManagerHtmlViewRootDocumentElement[0];
    } catch (exception) {
      throw "InstallKnockoutViewTemplates for id=" + windowManagerId_ + " : " + exception;
    }
  };

  /*
  ------------------------------------------------------------------------------
  
  The MIT License (MIT)
  
  Copyright (c) 2013 Encapsule Project
    
  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:
  
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  THE SOFTWARE.
  
  **** Encapsule Project :: Build better software with circuit models ****
  
  OPEN SOURCES: http://github.com/Encapsule HOMEPAGE: http://Encapsule.org
  BLOG: http://blog.encapsule.org TWITTER: https://twitter.com/Encapsule
  
  ------------------------------------------------------------------------------
  
  
  
  ------------------------------------------------------------------------------
  */


  namespaceEncapsule = (typeof Encapsule !== "undefined" && Encapsule !== null) && Encapsule || (this.Encapsule = {});

  Encapsule.code = (Encapsule.code != null) && Encapsule.code || (this.Encapsule.code = {});

  Encapsule.code.lib = (Encapsule.code.lib != null) && Encapsule.code.lib || (this.Encapsule.code.lib = {});

  Encapsule.code.lib.onm = (Encapsule.code.lib.onm != null) && Encapsule.code.lib.onm || (this.Encapsule.code.lib.onm = {});

  ONMjs = Encapsule.code.lib.onm;

  ONMjs.observers = (ONMjs.observers != null) && ONMjs.observers || (ONMjs.observers = {});

  ONMjs.observers.NavigatorModelView = (function() {

    function NavigatorModelView() {
      var _this = this;
      try {
        this.objectStore = void 0;
        this.rootMenuModelView = void 0;
        this.store = void 0;
        this.storeObserverId = void 0;
        this.selectedCachedAddressSinkStore = void 0;
        this.attachToStore = function(store_) {
          try {
            if (!((store_ != null) && store_)) {
              throw "Missing store input parameter.";
            }
            if ((_this.storeObserverId != null) && _this.storeObserverId) {
              throw "This navigator instance is already observing an ONMjs.Store instance.";
            }
            _this.store = store_;
            _this.storeObserverId = store_.registerObserver(_this.objectStoreObserverInterface, _this);
            return true;
          } catch (exception) {
            throw "ONMjs.observers.NavigatorModelView.attachToStore failure: " + exception;
          }
        };
        this.detachFromStore = function() {
          try {
            if (!(_this.storeObserverId != null) && _this.storeObserverId) {
              throw "This navigator instance is not attached to an ONMjs.Store instance.";
            }
            _this.store.unregisterObserver(_this.storeObserverId);
            _this.storeObserverId = void 0;
            return true;
          } catch (exception) {
            throw "ONMjs.observers.NavigatorModelView.detachFromStore failure: " + exception;
          }
        };
        this.attachToCachedAddress = function(cachedAddress_) {
          var observerId;
          try {
            if (!((cachedAddress_ != null) && cachedAddress_)) {
              throw "Missing cached address input parameter.";
            }
            observerId = cachedAddress_.registerObserver(_this.cachedAddressObserverInterface, _this);
            return observerId;
          } catch (exception) {
            throw "ONMjs.observers.NavigatorModelView.attachToCachedAddress failure: " + excpetion;
          }
        };
        this.detachFromCachedAddress = function(cachedAddres_, observerId_) {
          try {
            if (!((typeof cachedAddress_ !== "undefined" && cachedAddress_ !== null) && cachedAddres_)) {
              throw "Missing cached address input parameter.";
            }
            if (!((observerId_ != null) && observerId_)) {
              throw "Missing observer ID input parameter.";
            }
            cachedAddress_.unregisterObserver(observerId_);
            return true;
          } catch (exception) {
            throw "ONMjs.observers.NavigatorModelView.detachFromCachedAddress failure: " + exception;
          }
        };
        this.setCachedAddressSinkStore = function(cachedAddress_) {
          try {
            if (!((cachedAddress_ != null) && cachedAddress_)) {
              throw "Missing cached address input parameter.";
            }
            return _this.selectedCachedAddressSinkStore = cachedAddress_;
          } catch (exception) {
            throw "ONMjs.observers.NavigatorModelView.setCachedAddressSinkStore failure: " + exception;
          }
        };
        this.routeUserSelectAddressRequest = function(address_) {
          var message;
          try {
            if ((_this.selectedCachedAddressSinkStore != null) && _this.selectedCachedAddressSinkStore) {
              _this.selectedCachedAddressSinkStore.setAddress(address_);
              return;
            }
            message = ("ONMjs.obsevers.NavigatorModelView.routeUserSelectAddressRequest for address  '" + (address_.getHashString()) + "'failed. ") + "setCachedAddressSinkStore method must be called to set the routing destination.";
            return alert(message);
          } catch (exception) {
            throw "ONMjs.observers.NavigatorModelView.routeUserSelectAddressRequest failure: " + exception;
          }
        };
        this.objectStoreObserverInterface = {
          onObserverAttachBegin: function(store_, observerId_) {
            try {
              Console.message("ONMjs.observer.NavigatorModelview is now observing ONMjs.Store.");
              if ((_this.storeObserverId != null) && _this.storeObserverId) {
                throw "This navigator instance is already observing an ONMjs.Store.";
              }
              _this.storeObserverId = observerId_;
              return true;
            } catch (exception) {
              throw "ONMjs.observers.NavigatorModelView.objectStoreObserverCallbacks.onObserverAttach failure: " + exception;
            }
          },
          onObserverDetachEnd: function(store_, observerId_) {
            try {
              Console.message("ONMjs.observers.NavigatorModelView is no longer observing ONMjs.Store.");
              if (!((_this.storeObserverId != null) && _this.storeObserverId)) {
                throw "Internal error: received detach callback but it doesn't apprear we're attached?";
              }
              if (_this.storeObserverId !== observerId_) {
                throw "Internal error: received detach callback for un unrecognized observer ID?";
              }
              _this.storeObserverId = void 0;
              return true;
            } catch (exception) {
              throw "ONMjs.observers.NavigatorModelView.objectStoreObserverCallbacks.onObserverDetach failure: " + exception;
            }
          },
          onNamespaceCreated: function(store_, observerId_, address_) {
            var namespaceState, parentAddress, parentNamespaceState;
            try {
              if (_this.storeObserverId !== observerId_) {
                throw "Unrecognized observer ID.";
              }
              namespaceState = store_.openObserverNamespaceState(observerId_, address_);
              namespaceState.description = "Hey this is the ONMjs.observers.NavigatorModelView class saving some submenu state.";
              namespaceState.itemModelView = new ONMjs.observers.implementation.NavigatorItemModelView(store_, _this, address_);
              if (address_.isRoot()) {
                _this.rootMenuModelView = namespaceState.itemModelView;
              }
              parentAddress = address_.createParentAddress();
              if ((parentAddress != null) && (parentAddress != null)) {
                parentNamespaceState = store_.openObserverNamespaceState(observerId_, parentAddress);
                parentNamespaceState.itemModelView.children.push(namespaceState.itemModelView);
                return namespaceState.indexInParentChildArray = parentNamespaceState.itemModelView.children().length - 1;
              }
            } catch (exception) {
              throw "ONMjs.observers.NavigatorModelView failure: " + exception;
            }
          },
          onNamespaceUpdated: function(store_, observerId_, address_) {
            var namespace, namespaceModel, namespaceState;
            try {
              if (_this.storeObserverId !== observerId_) {
                throw "Unrecognized observer ID.";
              }
              namespaceModel = address_.getModel();
              if (namespaceModel.namespaceType !== "component") {
                return;
              }
              namespace = store_.openNamespace(address_);
              namespaceState = store_.openObserverNamespaceState(observerId_, address_);
              return namespaceState.itemModelView.label(namespace.getResolvedLabel());
            } catch (exception) {
              throw "ONMjs.observers.NavigatorModelView.onNamespaceUpdated failure: " + excpetion;
            }
          },
          onNamespaceRemoved: function(store_, observerId_, address_) {
            var item, itemAddress, itemState, namespaceState, parentAddress, parentChildItemArray, parentNamespaceState, spliceIndex;
            try {
              if (_this.storeObserverId !== observerId_) {
                throw "Unrecognized observer ID.";
              }
              namespaceState = store_.openObserverNamespaceState(observerId_, address_);
              if (address_.isRoot()) {
                _this.rootMenuModelView = void 0;
              }
              parentAddress = address_.createParentAddress();
              if ((parentAddress != null) && parentAddress) {
                parentNamespaceState = store_.openObserverNamespaceState(observerId_, parentAddress);
                parentChildItemArray = parentNamespaceState.itemModelView.children();
                spliceIndex = namespaceState.indexInParentChildArray;
                parentChildItemArray.splice(spliceIndex, 1);
                while (spliceIndex < parentChildItemArray.length) {
                  item = parentChildItemArray[spliceIndex];
                  itemAddress = item.address;
                  itemState = store_.openObserverNamespaceState(observerId_, itemAddress);
                  itemState.indexInParentChildArray = spliceIndex++;
                }
                parentNamespaceState.itemModelView.children(parentChildItemArray);
                return true;
              }
            } catch (exception) {
              throw "ONMjs.observers.NavigatorModelView.onNamespaceRemoved failure: " + exception;
            }
          }
        };
        this.selectedNamespacesBySelectorHash = {};
        this.cachedAddressObserverInterface = {
          onComponentCreated: function(store_, observerId_, address_) {
            try {
              return _this.cachedAddressObserverInterface.onComponentUpdated(store_, observerId_, address_);
            } catch (exception) {
              throw "ONMjs.observers.NavigatorModelView.cachedAddressObserverInterface.onComponentCreated failure: " + exception;
            }
          },
          onComponentUpdated: function(store_, observerId_, address_) {
            var cachedAddress, namespaceState, observerState;
            try {
              observerState = store_.openObserverState(observerId_);
              if ((observerState.itemModelView != null) && observerState.itemModelView) {
                observerState.itemModelView.removeSelection(observerId_);
              }
              cachedAddress = store_.getAddress();
              if ((cachedAddress != null) && cachedAddress) {
                namespaceState = _this.store.openObserverNamespaceState(_this.storeObserverId, cachedAddress);
                if (!((namespaceState.itemModelView != null) && namespaceState.itemModelView)) {
                  throw "Internal error: namespace state cache for this namespace is not initialized.";
                }
                namespaceState.itemModelView.addSelection(observerId_);
                return observerState.itemModelView = namespaceState.itemModelView;
              }
            } catch (exception) {
              throw "ONMjs.observers.NavigatorModelView.cachedAddressObserverInterface.onComponentUpdated failure: " + exception;
            }
          }
        };
      } catch (exception) {
        throw " ONMjs.observers.NavigatorModelView consructor failure: " + exception;
      }
    }

    return NavigatorModelView;

  })();

  Encapsule.code.lib.kohelpers.RegisterKnockoutViewTemplate("idKoTemplate_NavigatorViewModel", (function() {
    return "<span data-bind=\"if: rootMenuModelView\">\n    <div class=\"classONMjsNavigator\">\n        <span data-bind=\"template: { name: 'idKoTemplate_NavigatorItemViewModel', foreach: rootMenuModelView.children }\"></span>\n    </div>\n</span>";
  }));

  /*
  ------------------------------------------------------------------------------
  
  The MIT License (MIT)
  
  Copyright (c) 2013 Encapsule Project
    
  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:
  
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  THE SOFTWARE.
  
  **** Encapsule Project :: Build better software with circuit models ****
  
  OPEN SOURCES: http://github.com/Encapsule HOMEPAGE: http://Encapsule.org
  BLOG: http://blog.encapsule.org TWITTER: https://twitter.com/Encapsule
  
  ------------------------------------------------------------------------------
  
  
  
  ------------------------------------------------------------------------------
  */


  namespaceEncapsule = (typeof Encapsule !== "undefined" && Encapsule !== null) && Encapsule || (this.Encapsule = {});

  Encapsule.code = (Encapsule.code != null) && Encapsule.code || (this.Encapsule.code = {});

  Encapsule.code.lib = (Encapsule.code.lib != null) && Encapsule.code.lib || (this.Encapsule.code.lib = {});

  Encapsule.code.lib.onm = (Encapsule.code.lib.onm != null) && Encapsule.code.lib.onm || (this.Encapsule.code.lib.onm = {});

  ONMjs = Encapsule.code.lib.onm;

  ONMjs.observers = (ONMjs.observers != null) && ONMjs.observers || (ONMjs.observer = {});

  ONMjs.observers.implementation = (ONMjs.observers.implementation != null) && ONMjs.observers.implementation || (ONMjs.observers.implementation = {});

  ONMjs.observers.implementation.NavigatorItemModelView = (function() {

    function NavigatorItemModelView(store_, navigatorModelView_, address_) {
      var namespace,
        _this = this;
      try {
        if (!((store_ != null) && store_)) {
          throw "Missing object store input parameter.";
        }
        if (!((navigatorModelView_ != null) && navigatorModelView_)) {
          throw "Missing parent object model navigator window input parameter.";
        }
        if (!((address_ != null) && address_)) {
          throw "Missing address input parameter.";
        }
        this.store = store_;
        this.navigatorModelView = navigatorModelView_;
        this.address = address_;
        this.children = ko.observableArray([]);
        this.isSelected = ko.observable(false);
        this.selectionsByObserverId = {};
        namespace = store_.openNamespace(address_);
        this.label = ko.observable(namespace.getResolvedLabel());
        this.onClick = function() {
          try {
            return _this.navigatorModelView.routeUserSelectAddressRequest(_this.address);
          } catch (exception) {
            return Console.messageError("ONMjs.observers.implementation.PathElementModelView.onClick failure: " + exception);
          }
        };
        this.addSelection = function(observerId_) {
          try {
            if (!((observerId_ != null) && observerId_)) {
              throw "Missing observer ID input parameter.";
            }
            _this.selectionsByObserverId[observerId_] = true;
            return _this.isSelected(true);
          } catch (exception) {
            throw "ONMjs.observers.implementation.PathElementModelView.addSelection failure: " + exception;
          }
        };
        this.removeSelection = function(observerId_) {
          try {
            if (!((observerId_ != null) && observerId_)) {
              throw "Missing observer ID input parameter.";
            }
            delete _this.selectionsByObserverId[observerId_];
            return _this.isSelected(Encapsule.code.lib.js.dictionaryLength(_this.selectionsByObserverId) && true || false);
          } catch (exception) {
            throw "ONMjs.observers.implementation.PathElementModelView.removeSelection failure: " + exception;
          }
        };
      } catch (exception) {
        throw "ONMjs.observers.implementation.PathElementModelView construction failure: : " + exception;
      }
    }

    return NavigatorItemModelView;

  })();

  Encapsule.code.lib.kohelpers.RegisterKnockoutViewTemplate("idKoTemplate_NavigatorItemViewModel", (function() {
    return "<span data-bind=\"if: isSelected()\">\n    <div class=\"classONMjsNavigatorItem classONMjsNavigatorItemSelected\">\n        <div class=\"classONMjsNavigatorItemSelectedLabel\" data-bind=\"text: label\" ></div>\n\n        <span data-bind=\"if: children().length\">\n            <div class=\"classONMjsNavigatorItemSelectedChildren\">\n                <div data-bind=\"template: { name: 'idKoTemplate_NavigatorItemViewModel', foreach: children }\"></div>\n            </div>\n        </span>\n\n    </div>\n</span>\n\n<span data-bind=\"ifnot: isSelected()\">\n    <div class=\"classONMjsNavigatorItem classONMjsNavigatorItemUnselected classONMjsMouseOverPointer\" data-bind=\"click: onClick, clickBubble: false\" >\n        <div class=\"classONMjsNavigatorItemUnselectedLabel\" data-bind=\"text: label\"></div>\n\n        <span data-bind=\"if: children().length\">\n            <div class=\"classONMjsNavigatorItemUnselectedChildren\">\n                <div data-bind=\"template: { name: 'idKoTemplate_NavigatorItemViewModel', foreach: children }\"></div>\n            </div>\n        </span>\n\n    </div>\n</span>";
  }));

  /*
  ------------------------------------------------------------------------------
  
  The MIT License (MIT)
  
  Copyright (c) 2013 Encapsule Project
    
  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:
  
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  THE SOFTWARE.
  
  **** Encapsule Project :: Build better software with circuit models ****
  
  OPEN SOURCES: http://github.com/Encapsule HOMEPAGE: http://Encapsule.org
  BLOG: http://blog.encapsule.org TWITTER: https://twitter.com/Encapsule
  
  ------------------------------------------------------------------------------
  
  
  ------------------------------------------------------------------------------
  */


  namespaceEncapsule = (typeof Encapsule !== "undefined" && Encapsule !== null) && Encapsule || (this.Encapsule = {});

  Encapsule.code = (Encapsule.code != null) && Encapsule.code || (this.Encapsule.code = {});

  Encapsule.code.lib = (Encapsule.code.lib != null) && Encapsule.code.lib || (this.Encapsule.code.lib = {});

  Encapsule.code.lib.onm = (Encapsule.code.lib.onm != null) && Encapsule.code.lib.onm || (this.Encapsule.code.lib.onm = {});

  ONMjs = Encapsule.code.lib.onm;

  ONMjs.observers.SelectedJsonModelView = (function() {

    function SelectedJsonModelView() {
      var _this = this;
      try {
        this.title = ko.observable("<not connected>");
        this.selectorHash = ko.observable("<not connected>");
        this.jsonString = ko.observable("<not connected>");
        this.cachedAddressStore = void 0;
        this.cahcedAddressStoreObserverId = void 0;
        this.saveJSONAsLinkHtml = ko.computed(function() {
          var html;
          return html = "<a href=\"data:text/json;base64," + (window.btoa(_this.jsonString())) + "\" target=\"_blank\" title=\"Open raw JSON in new tab...\"> \n<img src=\"./img/json_file-48x48.png\" style=\"width: 24px; heigh: 24px; border: 0px solid black; vertical-align: middle;\" ></a>";
        });
        this.attachToCachedAddress = function(cachedAddress_) {
          try {
            if (!((cachedAddress_ != null) && cachedAddress_)) {
              throw "Missing cached address store input parameter.";
            }
            if ((_this.cachedAddressStore != null) && _this.cachedAddressStore) {
              throw "Already attached to an ONMjs.CachedAddress object.";
            }
            _this.cachedAddressStore = cachedAddress_;
            _this.storeObserverId = cachedAddress_.registerObserver(_this.cachedAddressCallbackInterface, _this);
            return true;
          } catch (exception) {
            throw "ONMjs.observers.SelectedJsonModelView.attachToCachedAddress failure: " + exception + ".";
          }
        };
        this.detachFromCachedAddress = function() {
          try {
            if (!((_this.cachedAddressStoreObserverId != null) && _this.cachedAddressStoreObserverId)) {
              throw "Not attached to an ONMjs.CachedAddress object.";
            }
            _this.cachedAddressStore.unregisterObserver(_this.cachedAddressStoreObserverId);
            _this.cachedAddressStore = void 0;
            _this.cachedAddressStoreObserverId = void 0;
            return true;
          } catch (exception) {
            throw "ONMjs.observers.SelectedJsonModelView.detachFromCachedAddress failure: " + exception + ".";
          }
        };
        this.cachedAddressCallbackInterface = {
          onComponentCreated: function(store_, observerId_, address_) {
            try {
              return _this.cachedAddressCallbackInterface.onComponentUpdated(store_, observerId_, address_);
            } catch (exception) {
              throw "ONMjs.observers.SelectedJsonModelView.cachedAddressCallbackInterface.onComponentCreated failure: " + exception;
            }
          },
          onComponentUpdated: function(store_, observerId_, address_) {
            var selectedNamespace, storeAddress;
            try {
              storeAddress = store_.getAddress();
              if (!((storeAddress != null) && storeAddress)) {
                _this.title("<no selected address>");
                _this.selectorHash("Address: <no selected address>");
                _this.jsonString("<undefined>");
                return true;
              }
              selectedNamespace = store_.referenceStore.openNamespace(storeAddress);
              _this.title(selectedNamespace.getResolvedLabel());
              _this.selectorHash(selectedNamespace.getResolvedAddress().getHashString());
              _this.jsonString(selectedNamespace.toJSON(void 0, 2));
              return true;
            } catch (exception) {
              throw "ONMjs.observers.SelectedJsonModelView.cachedAddressCallbackInterface.onComponentUpdated failure: " + exception;
            }
          }
        };
      } catch (exception) {
        throw "ONMjs.observers.SelectedJsonModelView construction failure: " + exception;
      }
    }

    return SelectedJsonModelView;

  })();

  Encapsule.code.lib.kohelpers.RegisterKnockoutViewTemplate("idKoTemplate_ObjectModelNavigatorJsonModelView", (function() {
    return "<div class=\"classONMjsSelectedJson\">\n    <span data-bind=\"html: saveJSONAsLinkHtml\"></span>\n    <span class=\"titleString\" data-bind=\"html: title\"></span>\n</div>\naddress hash:<br>\n<span class=\"classONMjsSelectedJsonAddressHash\" data-bind=\"html: selectorHash\"></span>\n<div class=\"classObjectModelNavigatorJsonBody\">\n    <pre class=\"classONMjsSelectedJsonBody\" data-bind=\"html: jsonString\"></pre>\n</div>";
  }));

  /*
  ------------------------------------------------------------------------------
  
  The MIT License (MIT)
  
  Copyright (c) 2013 Encapsule Project
    
  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:
  
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  THE SOFTWARE.
  
  **** Encapsule Project :: Build better software with circuit models ****
  
  OPEN SOURCES: http://github.com/Encapsule HOMEPAGE: http://Encapsule.org
  BLOG: http://blog.encapsule.org TWITTER: https://twitter.com/Encapsule
  
  ------------------------------------------------------------------------------
  
  
  
  ------------------------------------------------------------------------------
  */


  namespaceEncapsule = (typeof Encapsule !== "undefined" && Encapsule !== null) && Encapsule || (this.Encapsule = {});

  Encapsule.code = (Encapsule.code != null) && Encapsule.code || (this.Encapsule.code = {});

  Encapsule.code.lib = (Encapsule.code.lib != null) && Encapsule.code.lib || (this.Encapsule.code.lib = {});

  Encapsule.code.lib.onm = (Encapsule.code.lib.onm != null) && Encapsule.code.lib.onm || (this.Encapsule.code.lib.onm = {});

  ONMjs = Encapsule.code.lib.onm;

  ONMjs.observers = (ONMjs.observers != null) && ONMjs.observers || (ONMjs.observers = {});

  ONMjs.observers.implementation = (ONMjs.observers.implementation != null) && ONMjs.observers.implementation || (ONMjs.observers.implementation = {});

  ONMjs.observers.implementation.SelectedPathElementModelView = (function() {

    function SelectedPathElementModelView(addressCache_, count_, selectedCount_, objectStoreAddress_) {
      var objectStoreDescriptor, objectStoreNamespace, resolvedLabel, styleClasses,
        _this = this;
      try {
        this.cachedAddressStore = addressCache_;
        this.objectStoreAddress = objectStoreAddress_;
        this.isSelected = count_ === selectedCount_;
        objectStoreNamespace = addressCache_.referenceStore.openNamespace(objectStoreAddress_);
        objectStoreDescriptor = objectStoreNamespace.getResolvedToken().namespaceDescriptor;
        resolvedLabel = objectStoreNamespace.getResolvedLabel();
        this.prefix = "";
        switch (count_) {
          case 0:
            break;
          case 1:
            this.prefix += " :: ";
            break;
          default:
            this.prefix += " / ";
            break;
        }
        if (this.prefix.length) {
          this.prefix = "<span class=\"prefix\">" + this.prefix + "</span>";
        }
        this.label = "";
        if (this.isSelected) {
          this.label += "<span class=\"selected\">" + resolvedLabel + "</span>";
        } else {
          styleClasses = "parent classONMjsMouseOverPointer";
          if (objectStoreDescriptor.isComponent) {
            styleClasses += " component";
          }
          this.label += "<span class=\"" + styleClasses + "\">" + resolvedLabel + "</span>";
        }
        this.onClick = function() {
          try {
            if (!_this.isSelected) {
              return _this.cachedAddressStore.setAddress(_this.objectStoreAddress);
            }
          } catch (exception) {
            return Console.messageError("ONMjs.observers.implementation.SelectedPathElementModelView.onClick failure: " + exception);
          }
        };
      } catch (exception) {
        throw "ONMjs.observers.SelectedPathElementModelView failure: " + exception;
      }
    }

    return SelectedPathElementModelView;

  })();

  Encapsule.code.lib.kohelpers.RegisterKnockoutViewTemplate("idKoTemplate_SelectedPathElementViewModel", (function() {
    return "<span class=\"classONMjsSelectedPathElement\"><span data-bind=\"html: prefix\"></span><span data-bind=\"html: label, click: onClick\"></span></span>";
  }));

  ONMjs.observers.SelectedPathModelView = (function() {

    function SelectedPathModelView() {
      var _this = this;
      try {
        this.pathElements = ko.observableArray([]);
        this.cachedAddressStore = void 0;
        this.cachedAddressStoreObserverId = void 0;
        this.addressHumanString = ko.observable("not connected");
        this.addressHashString = ko.observable("not connected");
        this.attachToCachedAddress = function(cachedAddress_) {
          try {
            if (!((cachedAddress_ != null) && cachedAddress_)) {
              throw "Missing cached address input parameter.";
            }
            if ((_this.cachedAddressStore != null) && _this.cachedAddressStore) {
              throw "Already attached to an ONMjs.CachedAddress object.";
            }
            _this.cachedAddressStore = cachedAddress_;
            _this.cachedAddressStoreObserverId = cachedAddress_.registerObserver(_this.cachedAddressObserverInterface, _this);
            return true;
          } catch (exception) {
            throw "ONMjs.observers.SelectedPathModelView.attachToCachedAddress failure: " + exception;
          }
        };
        this.detachFromCachedAddress = function() {
          try {
            if (!((_this.cachedAddressStoreObserverId != null) && _this.cachedAddressStoreObserverId)) {
              throw "Not attached to an ONMjs.CachedAddress object.";
            }
            _this.cachedAddressStore.unregisterObserver(_this.cachedAddressStoreObserverId);
            return true;
          } catch (exception) {
            throw "ONMjs.observers.SelectedPathModelView.detachFromCachedAddress failure: " + exception;
          }
        };
        this.cachedAddressObserverInterface = {
          onAttachEnd: function(store_, observerId_) {
            return Console.message("ONMjs.observers.SelectedPathModelView has attached to and is observing in ONMjs.CachedAddress instance.");
          },
          onDetachEnd: function(store_, observerId_) {
            _this.pathElements.removeAll();
            _this.addressHashString("not connected");
            _this.addressHumanString("not connected");
            _this.cachedAddress = void 0;
            _this.cachedAddressStoreObserverId = void 0;
            return Console.message("ONMjs.observers.SelectedPathModelView has detached from and is no longer observing an ONMjs.CachedAddress instance.");
          },
          onComponentCreated: function(store_, observerId_, address_) {
            try {
              return _this.cachedAddressObserverInterface.onComponentUpdated(store_, observerId_, address_);
            } catch (exception) {
              return "ONMjs.observers.SelectedPathModelView.cachedAddressObserverInterface.onComponentCreated failure: " + exception;
            }
          },
          onComponentUpdated: function(store_, observerId_, address_) {
            var address, addresses, count, pathElementObject, selectedAddress, selectedCount, _i, _len;
            try {
              selectedAddress = store_.getAddress();
              if (!((selectedAddress != null) && selectedAddress)) {
                return true;
              }
              _this.addressHumanString(selectedAddress.getHumanReadableString());
              _this.addressHashString(selectedAddress.getHashString());
              addresses = [];
              selectedAddress.visitParentAddressesAscending(function(address__) {
                return addresses.push(address__);
              });
              addresses.push(selectedAddress);
              count = 0;
              selectedCount = addresses.length - 1;
              _this.pathElements.removeAll();
              for (_i = 0, _len = addresses.length; _i < _len; _i++) {
                address = addresses[_i];
                pathElementObject = new ONMjs.observers.implementation.SelectedPathElementModelView(store_, count++, selectedCount, address);
                _this.pathElements.push(pathElementObject);
              }
              return true;
            } catch (exception) {
              throw "OMNjs.observers.SelectedPathModelView.cachedAddressObserverInterface.onComponentUpdated failure: " + exception;
            }
          }
        };
      } catch (exception) {
        throw "ONMjs.observers.SelectedPathModelView construction failure: " + exception;
      }
    }

    return SelectedPathModelView;

  })();

  Encapsule.code.lib.kohelpers.RegisterKnockoutViewTemplate("idKoTemplate_SelectedPathViewModel", (function() {
    return "<div class=\"classONMjsSelectedPath\"><span data-bind=\"template: { name: 'idKoTemplate_SelectedPathElementViewModel', foreach: pathElements }\"></span></div>\n<div style=\"margin-top: 8px; font-family: Courier;\"><span data-bind=\"text: addressHumanString\"></span></div>\n<div style=\"font-family: Courier;\"><span data-bind=\"text: addressHashString\"></span></div>";
  }));

  /*
  ------------------------------------------------------------------------------
  
  The MIT License (MIT)
  
  Copyright (c) 2013 Encapsule Project
    
  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:
  
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  THE SOFTWARE.
  
  **** Encapsule Project :: Build better software with circuit models ****
  
  OPEN SOURCES: http://github.com/Encapsule HOMEPAGE: http://Encapsule.org
  BLOG: http://blog.encapsule.org TWITTER: https://twitter.com/Encapsule
  
  ------------------------------------------------------------------------------
  
  Canary is a test observer that observes a ONMjs.Store and sings to the console logger.
  
  ------------------------------------------------------------------------------
  */


  namespaceEncapsule = (typeof Encapsule !== "undefined" && Encapsule !== null) && Encapsule || (this.Encapsule = {});

  Encapsule.code = (Encapsule.code != null) && Encapsule.code || (this.Encapsule.code = {});

  Encapsule.code.lib = (Encapsule.code.lib != null) && Encapsule.code.lib || (this.Encapsule.code.lib = {});

  Encapsule.code.lib.onm = (Encapsule.code.lib.onm != null) && Encapsule.code.lib.onm || (this.Encapsule.code.lib.onm = {});

  ONMjs = Encapsule.code.lib.onm;

  ONMjs.test = {};

  ONMjs.test.observers = {};

  ONMjs.test.observers.Canary = (function() {
    var _this = this;

    function Canary() {}

    Canary.prototype.callbackInterface = {
      onObserverAttachBegin: function(store_, observerId_) {
        return Console.message("ONMjs_" + store_.jsonTag + "::" + observerId_ + "::onObserverAttachBegin");
      },
      onObserverAttachEnd: function(store_, observerId_) {
        return Console.message("ONMjs_" + store_.jsonTag + "::" + observerId_ + "::onObserverAttachEnd");
      },
      onObserverDetachBegin: function(store_, observerId_) {
        return Console.message("ONMjs_" + store_.jsonTag + "::" + observerId_ + "::onObserverDetachBegin");
      },
      onObserverDetachEnd: function(store_, observerId_) {
        return Console.message("ONMjs_" + store_.jsonTag + "::" + observerId_ + "::onObserverDetachEnd");
      },
      onComponentCreated: function(store_, observerId_, address_) {
        return Console.message("ONMjs_" + store_.jsonTag + "::" + observerId_ + "::onComponentCreated(" + (address_.getHumanReadableString()) + ")");
      },
      onComponentUpdated: function(store_, observerId_, address_) {
        return Console.message("ONMjs_" + store_.jsonTag + "::" + observerId_ + "::onComponentUpdated(" + (address_.getHumanReadableString()) + ")");
      },
      onComponentRemoved: function(store_, observerId_, address_) {
        return Console.message("ONMjs_" + store_.jsonTag + "::" + observerId_ + "::onComponentRemoved(" + (address_.getHumanReadableString()) + ")");
      },
      onNamespaceCreated: function(store_, observerId_, address_) {
        return Console.message("ONMjs_" + store_.jsonTag + "::" + observerId_ + "::onNamespaceCreated(" + (address_.getHumanReadableString()) + ")");
      },
      onNamespaceUpdated: function(store_, observerId_, address_) {
        return Console.message("ONMjs_" + store_.jsonTag + "::" + observerId_ + "::onNamespaceUpdated(" + (address_.getHumanReadableString()) + ")");
      },
      onNamespaceRemoved: function(store_, observerId_, address_) {
        return Console.message("ONMjs_" + store_.jsonTag + "::" + observerId_ + "::onNamespaceRemoved(" + (address_.getHumanReadableString()) + ")");
      },
      onSubNamespaceUpdated: function(store_, observerId_, address_) {
        return Console.message("ONMjs_" + store_.jsonTag + "::" + observerId_ + "::onSubNamespaceUpdated(" + (address_.getHumanReadableString()) + ")");
      },
      onSubComponentUpdated: function(store_, observerId_, address_) {
        return Console.message("ONMjs_" + store_.jsonTag + "::" + observerId_ + "::onSubComponentUpdated(" + (address_.getHumanReadableString()) + ")");
      }
    };

    return Canary;

  }).call(this);

  /*
  ------------------------------------------------------------------------------
  
  The MIT License (MIT)
  
  Copyright (c) 2013 Encapsule Project
    
  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:
  
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  THE SOFTWARE.
  
  **** Encapsule Project :: Build better software with circuit models ****
  
  OPEN SOURCES: http://github.com/Encapsule HOMEPAGE: http://Encapsule.org
  BLOG: http://blog.encapsule.org TWITTER: https://twitter.com/Encapsule
  
  ------------------------------------------------------------------------------
  
  
  
  ------------------------------------------------------------------------------
  */


  namespaceEncapsule = (typeof Encapsule !== "undefined" && Encapsule !== null) && Encapsule || (this.Encapsule = {});

  Encapsule.code = (Encapsule.code != null) && Encapsule.code || (this.Encapsule.code = {});

  Encapsule.code.lib = (Encapsule.code.lib != null) && Encapsule.code.lib || (this.Encapsule.code.lib = {});

  Encapsule.code.lib.onm = (Encapsule.code.lib.onm != null) && Encapsule.code.lib.onm || (this.Encapsule.code.lib.onm = {});

  ONMjs = Encapsule.code.lib.onm;

  ONMjs.observers = (ONMjs.observers != null) && ONMjs.observers || (ONMjs.observers = {});

  ONMjs.observers.SelectedNamespaceModelView = (function() {

    function SelectedNamespaceModelView() {
      var _this = this;
      try {
        this.objectStoreName = ko.observable("<not connected>");
        this.title = ko.observable("<not connected>");
        this.modelviewActions = ko.observable(void 0);
        this.modelviewTitle = ko.observable(void 0);
        this.modelviewImmutable = ko.observable(void 0);
        this.modelviewMutable = ko.observable(void 0);
        this.modelviewComponent = ko.observable(void 0);
        this.modelviewChildren = ko.observable(void 0);
        this.modelviewCollection = ko.observable(void 0);
        this.cachedAddressStore = void 0;
        this.cachedAddressStoreObserverId = void 0;
        this.attachToCachedAddress = function(cachedAddress_) {
          try {
            if (!((cachedAddress_ != null) && cachedAddress_)) {
              throw "Missing cached address input parameter.";
            }
            if ((_this.cachedAddressStore != null) && _this.cachedAddressStore) {
              throw "This namespace observer is already attached to a selected address store.";
            }
            _this.cachedAddressStore = cachedAddress_;
            _this.cachedAddressStoreObserverId = cachedAddress_.registerObserver(_this.cachedAddressObserverInterface, _this);
            return true;
          } catch (exception) {
            throw "ONMjs.observers.SelectedNamespaceModelView.attachToCachedAddress failure: " + exception;
          }
        };
        this.detachFromCachedAddress = function() {
          try {
            if (!(_this.cachedAddressStoreObserverId && _this.cachedAddressStoreObserverId)) {
              throw "This namespace observer is not currently attached to a cached address store.";
            }
            _this.cachedAddressStore.unregisterObserver(_this.cachedAddressStoreObserverId);
            _this.cachedAddressStore = void 0;
            _this.cachedAddressStoreObserverId = void 0;
            return true;
          } catch (exception) {
            throw "ONMjs.observers.SelectedNamespaceModelView.detachFromCachedAddress failure: " + exception;
          }
        };
        this.cachedAddressObserverInterface = {
          onComponentCreated: function(cachedAddressStore_, observerId_, address_) {
            return _this.cachedAddressObserverInterface.onComponentUpdated(cachedAddressStore_, observerId_, address_);
          },
          onComponentUpdated: function(cachedAddressStore_, observerId_, address_) {
            var childParams, immutableModelView, mutableModelView, namespaceType, newModelViewChildren, objectStore, selectedAddress, selectedNamespace, selectedNamespaceModel;
            objectStore = cachedAddressStore_.referenceStore;
            selectedAddress = cachedAddressStore_.getAddress();
            if (!(selectedAddress && selectedAddress)) {
              return true;
            }
            selectedNamespace = objectStore.openNamespace(selectedAddress);
            selectedNamespaceModel = selectedAddress.getModel();
            _this.objectStoreName = objectStore.jsonTag;
            childParams = {
              cachedAddressStore: cachedAddressStore_,
              objectStore: objectStore,
              selectedAddress: selectedAddress,
              selectedNamespace: selectedNamespace,
              selectedNamespaceModel: selectedNamespaceModel
            };
            _this.modelviewTitle(new ONMjs.observers.SelectedNamespaceTitleModelView(childParams));
            _this.modelviewActions(new ONMjs.observers.SelectedNamespaceActionsModelView(childParams));
            namespaceType = selectedNamespaceModel.namespaceType;
            switch (namespaceType) {
              case "root":
                _this.modelviewImmutable(new ONMjs.observers.SelectedNamespaceImmutablePropertiesModelView(childParams));
                _this.modelviewMutable(void 0);
                newModelViewChildren = new ONMjs.observers.SelectedNamespaceChildrenModelView(childParams);
                _this.modelviewChildren(newModelViewChildren.childModelViews.length && newModelViewChildren || void 0);
                _this.modelviewComponent(new ONMjs.observers.SelectedNamespaceComponentModelView(childParams));
                _this.modelviewCollection(void 0);
                break;
              case "child":
                immutableModelView = new ONMjs.observers.SelectedNamespaceImmutablePropertiesModelView(childParams);
                _this.modelviewImmutable(immutableModelView.propertyModelViews.length && immutableModelView || void 0);
                mutableModelView = new ONMjs.observers.SelectedNamespaceMutablePropertiesModelView(childParams);
                _this.modelviewMutable(mutableModelView.propertyModelViews.length && mutableModelView || void 0);
                newModelViewChildren = new ONMjs.observers.SelectedNamespaceChildrenModelView(childParams);
                _this.modelviewChildren(newModelViewChildren.childModelViews.length && newModelViewChildren || void 0);
                _this.modelviewComponent(new ONMjs.observers.SelectedNamespaceComponentModelView(childParams));
                _this.modelviewCollection(void 0);
                break;
              case "extensionPoint":
                _this.modelviewImmutable(void 0);
                _this.modelviewMutable(void 0);
                _this.modelviewChildren(void 0);
                _this.modelviewComponent(new ONMjs.observers.SelectedNamespaceComponentModelView(childParams));
                _this.modelviewCollection(new ONMjs.observers.SelectedNamespaceCollectionModelView(childParams));
                break;
              case "component":
                immutableModelView = new ONMjs.observers.SelectedNamespaceImmutablePropertiesModelView(childParams);
                _this.modelviewImmutable(immutableModelView.propertyModelViews.length && immutableModelView || void 0);
                mutableModelView = new ONMjs.observers.SelectedNamespaceMutablePropertiesModelView(childParams);
                _this.modelviewMutable(mutableModelView.propertyModelViews.length && mutableModelView || void 0);
                newModelViewChildren = new ONMjs.observers.SelectedNamespaceChildrenModelView(childParams);
                _this.modelviewChildren(newModelViewChildren.childModelViews.length && newModelViewChildren || void 0);
                _this.modelviewComponent(new ONMjs.observers.SelectedNamespaceComponentModelView(childParams));
                _this.modelviewCollection(void 0);
                break;
              default:
                throw "Unrecognized namespace type in request.";
            }
          }
        };
      } catch (exception) {
        throw "ONMjs.observers.SelectedNamespaceModelView construction failure: " + exception;
      }
    }

    return SelectedNamespaceModelView;

  })();

  Encapsule.code.lib.kohelpers.RegisterKnockoutViewTemplate("idKoTemplate_SelectedNamespaceViewModel", (function() {
    return "<span data-bind=\"if: modelviewTitle\"><span data-bind=\"with: modelviewTitle\"><span data-bind=\"template: { name: 'idKoTemplate_SelectedNamespaceTitleViewModel' }\"></span></span></span>\n<span data-bind=\"if: modelviewActions\"><span data-bind=\"with: modelviewActions\"><span data-bind=\"template: { name: 'idKoTemplate_SelectedNamespaceActionsViewModel' }\"></span></span></span>\n<span data-bind=\"if: modelviewImmutable\"><span data-bind=\"with: modelviewImmutable\"><span data-bind=\"template: { name: 'idKoTemplate_SelectedNamespaceImmutablePropertiesViewModel' }\"></span></span></span>\n<span data-bind=\"if: modelviewMutable\"><span data-bind=\"with: modelviewMutable\"><span data-bind=\"template: { name: 'idKoTemplate_SelectedNamespaceMutablePropertiesViewModel'}\"></span></span></span>\n<span data-bind=\"if: modelviewCollection\"><span data-bind=\"with: modelviewCollection\"><span data-bind=\"template: { name: 'idKoTemplate_SelectedNamespaceCollectionViewModel'}\"></span></span></span>\n<span data-bind=\"if: modelviewComponent\"><span data-bind=\"with: modelviewComponent\"><span data-bind=\"template: { name: 'idKoTemplate_SelectedNamespaceComponentViewModel'}\"></span></span></span>\n<span data-bind=\"if: modelviewChildren\"><span data-bind=\"with: modelviewChildren\"><span data-bind=\"template: { name: 'idKoTemplate_SelectedNamespaceChildrenViewModel'}\"></span></span></span>";
  }));

  /*
  ------------------------------------------------------------------------------
  
  The MIT License (MIT)
  
  Copyright (c) 2013 Encapsule Project
    
  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:
  
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  THE SOFTWARE.
  
  **** Encapsule Project :: Build better software with circuit models ****
  
  OPEN SOURCES: http://github.com/Encapsule HOMEPAGE: http://Encapsule.org
  BLOG: http://blog.encapsule.org TWITTER: https://twitter.com/Encapsule
  
  ------------------------------------------------------------------------------
  
  
  
  ------------------------------------------------------------------------------
  */


  namespaceEncapsule = (typeof Encapsule !== "undefined" && Encapsule !== null) && Encapsule || (this.Encapsule = {});

  Encapsule.code = (Encapsule.code != null) && Encapsule.code || (this.Encapsule.code = {});

  Encapsule.code.lib = (Encapsule.code.lib != null) && Encapsule.code.lib || (this.Encapsule.code.lib = {});

  Encapsule.code.lib.onm = (Encapsule.code.lib.onm != null) && Encapsule.code.lib.onm || (this.Encapsule.code.lib.onm = {});

  ONMjs = Encapsule.code.lib.onm;

  ONMjs.observers = (ONMjs.observers != null) && ONMjs.observers || (ONMjs.observers = {});

  ONMjs.observers.SelectedNamespaceActionsModelView = (function() {

    function SelectedNamespaceActionsModelView(params_) {
      var archetypeLabel, componentAddress, componentModel, label, subcomponentCount,
        _this = this;
      try {
        this.onClickAddSubcomponent = function(prefix_, label_, address_, selectorStore_, options_) {
          var componentNamespace;
          try {
            Console.message("ObjectModelNavigatorNamespaceActions.onClickAddSubcomponent starting...");
            componentNamespace = selectorStore_.referenceStore.createComponent(address_);
            return selectorStore_.setAddress(componentNamespace.getResolvedAddress());
          } catch (exception) {
            return Console.messageError("ONMjs.observers.SelectedNamespaceActionsModelView.onClickAddSubcomponent failure: " + exception);
          }
        };
        this.onClickRemoveComponent = function(prefix_, label_, address_, selectorStore_, options_) {
          try {
            return _this.showConfirmRemove(true);
          } catch (exception) {
            throw "ONMjs.observers.SelectedNamespaceActionsModelView.onClickRemoveComponent failure: " + exception;
          }
        };
        this.onDoRemoveComponent = function(prefix_, label_, address_, selectorStore_, options_) {
          try {
            return selectorStore_.referenceStore.removeComponent(address_);
          } catch (exception) {
            return Console.messageError("ONMjs.observers.SelectedNamespaceActionsModelView.onClickRemoveComponent failure: " + exception);
          }
        };
        this.onClickRemoveAllSubcomponents = function(prefix_, label_, address_, selectorStore_, options_) {
          try {
            return _this.showConfirmRemoveAll(true);
          } catch (exception) {
            throw "ONMjs.observers.SelectedNamespaceActionsModelView.onClickRemoveAllSubcomponents failure: " + exception;
          }
        };
        this.onDoRemoveAllSubcomponents = function(prefix_, label_, address_, selectorStore_, options_) {
          var address, namespace, store, subcomponentAddresses, _i, _len, _results;
          try {
            store = selectorStore_.referenceStore;
            namespace = store.openNamespace(address_);
            subcomponentAddresses = [];
            namespace.visitExtensionPointSubcomponents(function(address__) {
              return subcomponentAddresses.push(address__);
            });
            _results = [];
            for (_i = 0, _len = subcomponentAddresses.length; _i < _len; _i++) {
              address = subcomponentAddresses[_i];
              _results.push(store.removeComponent(address));
            }
            return _results;
          } catch (exception) {
            return Console.messageError("ONMjs.observers.SelectedNamespaceActionsModelView.onClickRemoveAllSubcomponents failure: " + exception);
          }
        };
        this.onClickCancelActionRequest = function(prefix_, label_, address_, selectorStore_, options_) {
          try {
            _this.showConfirmRemoveAll(false);
            return _this.showConfirmRemove(false);
          } catch (exception) {
            throw "ONMjs.observers.SelectedNamespaceActionsModelView.onClickCancelActionRequest failure: " + exception;
          }
        };
        this.actionsForNamespace = false;
        this.callbackLinkAddSubcomponent = void 0;
        this.callbackLinkRequestRemoveAllSubcomponents = void 0;
        this.callbackLinkRemoveAllSubcomponents = void 0;
        this.callbackLinkRequestRemoveComponent = void 0;
        this.callbackLinkRemoveComponent = void 0;
        this.callbackLinkCancelActionRequest = new ONMjs.observers.helpers.CallbackLinkModelView("", "Cancel Request", void 0, void 0, {
          styleClass: "classONMjsActionButtonCancel"
        }, this.onClickCancelActionRequest);
        this.showConfirmRemove = ko.observable(false);
        this.showConfirmRemoveAll = ko.observable(false);
        switch (params_.selectedNamespaceModel.namespaceType) {
          case "root":
            break;
          case "child":
            break;
          case "extensionPoint":
            componentAddress = params_.selectedAddress.createSubcomponentAddress();
            componentModel = componentAddress.getModel();
            archetypeLabel = (componentModel.____label != null) && componentModel.____label || "<no label provided>";
            this.callbackLinkAddSubcomponent = new ONMjs.observers.helpers.CallbackLinkModelView("", "Add " + archetypeLabel, componentAddress, params_.cachedAddressStore, {
              styleClass: "classONMjsActionButtonAdd"
            }, this.onClickAddSubcomponent);
            subcomponentCount = Encapsule.code.lib.js.dictionaryLength(params_.selectedNamespace.data());
            label = (params_.selectedNamespaceModel.____label != null) && params_.selectedNamespaceModel.____label || "<no label defined>";
            this.callbackLinkRequestRemoveAllSubcomponents = new ONMjs.observers.helpers.CallbackLinkModelView("", "Remove All " + label, void 0, void 0, {
              noLink: subcomponentCount === 0,
              styleClass: subcomponentCount !== 0 && "classONMjsActionButtonRemoveAll" || void 0
            }, this.onClickRemoveAllSubcomponents);
            this.callbackLinkRemoveAllSubcomponents = new ONMjs.observers.helpers.CallbackLinkModelView("", "Proceed with Remove All", params_.selectedAddress, params_.cachedAddressStore, {
              noLink: subcomponentCount === 0,
              styleClass: subcomponentCount !== 0 && "classONMjsActionButtonConfirm" || void 0
            }, this.onDoRemoveAllSubcomponents);
            this.actionsForNamespace = true;
            break;
          case "component":
            label = (params_.selectedNamespaceModel.____label != null) && params_.selectedNamespaceModel.____label || "<no label provided>";
            this.callbackLinkRequestRemoveComponent = new ONMjs.observers.helpers.CallbackLinkModelView("", "Remove " + label, void 0, void 0, {
              styleClass: "classONMjsActionButtonRemove"
            }, this.onClickRemoveComponent);
            this.callbackLinkRemoveComponent = new ONMjs.observers.helpers.CallbackLinkModelView("", "Proceed with Remove", params_.selectedAddress, params_.cachedAddressStore, {
              styleClass: "classONMjsActionButtonConfirm"
            }, this.onDoRemoveComponent);
            this.actionsForNamespace = true;
            break;
        }
      } catch (exception) {
        throw "ONMjs.observers.SelectedNamespaceActions construction failure: " + exception;
      }
    }

    return SelectedNamespaceActionsModelView;

  })();

  Encapsule.code.lib.kohelpers.RegisterKnockoutViewTemplate("idKoTemplate_SelectedNamespaceActionsViewModel", (function() {
    return "<div class=\"classONMjsSelectedNamespaceSectionTitle\">\n    Actions:\n</div>\n<div class=\"classONMjsSelectedNamespaceSectionCommon classONMjsSelectedNamespaceActions\">\n    <span data-bind=\"if: actionsForNamespace\">\n        <div>\n            <span data-bind=\"if: callbackLinkAddSubcomponent\">\n                <span data-bind=\"with: callbackLinkAddSubcomponent\">\n                    <span data-bind=\"template: { name: 'idKoTemplate_CallbackLinkViewModel' }\"></span>\n                </span>\n            </span>\n            <span data-bind=\"if: callbackLinkRequestRemoveAllSubcomponents\">\n                <span data-bind=\"with: callbackLinkRequestRemoveAllSubcomponents\">\n                    <span data-bind=\"template: { name: 'idKoTemplate_CallbackLinkViewModel' }\"></span>\n                </span>\n            </span>\n            <span data-bind=\"if: callbackLinkRequestRemoveComponent\">\n                <span data-bind=\"with: callbackLinkRequestRemoveComponent\">\n                    <span data-bind=\"template: { name: 'idKoTemplate_CallbackLinkViewModel' }\"></span>\n                </span>\n            </span>\n\n            <span data-bind=\"if: showConfirmRemove\">\n                <div class=\"classONMjsActionConfirmation\">\n                    Please confirm <strong><span data-bind=\"text: callbackLinkRequestRemoveComponent.label\"></span></span></strong> request.<br><br>\n                    <span data-bind=\"with: callbackLinkCancelActionRequest\">\n                        <span data-bind=\"template: { name: 'idKoTemplate_CallbackLinkViewModel' }\"></span>\n                    </span>\n                    <span data-bind=\"with: callbackLinkRemoveComponent\">\n                        <span data-bind=\"template: { name: 'idKoTemplate_CallbackLinkViewModel' }\"></span>\n                    </span>\n                </div>\n            </span>\n\n            <span data-bind=\"if: showConfirmRemoveAll\">\n                <div class=\"classONMjsActionConfirmation\">\n                    Please confirm <strong><span data-bind=\"text: callbackLinkRequestRemoveAllSubcomponents.label\"></span></span></strong> request.<br><br>\n                    <span data-bind=\"with: callbackLinkCancelActionRequest\">\n                        <span data-bind=\"template: { name: 'idKoTemplate_CallbackLinkViewModel' }\"></span>\n                    </span>\n                    <span data-bind=\"with: callbackLinkRemoveAllSubcomponents\">\n                        <span data-bind=\"template: { name: 'idKoTemplate_CallbackLinkViewModel' }\"></span>\n                    </span>\n                </div>\n            </span>\n\n        </div>\n    </span>\n    <span data-bind=\"ifnot: actionsForNamespace\"><i>No actions defined for this namespace.</i></span>\n</div>";
  }));

  /*
  ------------------------------------------------------------------------------
  
  The MIT License (MIT)
  
  Copyright (c) 2013 Encapsule Project
    
  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:
  
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  THE SOFTWARE.
  
  **** Encapsule Project :: Build better software with circuit models ****
  
  OPEN SOURCES: http://github.com/Encapsule HOMEPAGE: http://Encapsule.org
  BLOG: http://blog.encapsule.org TWITTER: https://twitter.com/Encapsule
  
  ------------------------------------------------------------------------------
  
  
  
  ------------------------------------------------------------------------------
  */


  namespaceEncapsule = (typeof Encapsule !== "undefined" && Encapsule !== null) && Encapsule || (this.Encapsule = {});

  Encapsule.code = (Encapsule.code != null) && Encapsule.code || (this.Encapsule.code = {});

  Encapsule.code.lib = (Encapsule.code.lib != null) && Encapsule.code.lib || (this.Encapsule.code.lib = {});

  Encapsule.code.lib.onm = (Encapsule.code.lib.onm != null) && Encapsule.code.lib.onm || (this.Encapsule.code.lib.onm = {});

  ONMjs = Encapsule.code.lib.onm;

  ONMjs.observers = (ONMjs.observers != null) && ONMjs.observers || (ONMjs.observers = {});

  ONMjs.observers.SelectedNamespaceChildrenModelView = (function() {

    function SelectedNamespaceChildrenModelView(params_) {
      var index,
        _this = this;
      try {
        this.childModelViews = [];
        index = 0;
        params_.selectedAddress.visitChildAddresses(function(address_) {
          var childNamespace, label, prefix;
          childNamespace = params_.cachedAddressStore.referenceStore.openNamespace(address_);
          prefix = "" + (index++ + 1) + ": ";
          label = "" + (childNamespace.getResolvedLabel());
          if (address_.getModel().namespaceType === "extensionPoint") {
            label += " (" + (Encapsule.code.lib.js.dictionaryLength(childNamespace.data())) + ")";
          }
          label += "<br>";
          return _this.childModelViews.push(new ONMjs.observers.helpers.AddressSelectionLinkModelView(prefix, label, address_, params_.cachedAddressStore));
        });
      } catch (exception) {
        throw "ONMjs.observers.SelectedNamespaceChildrenModelView failure: " + exception;
      }
    }

    return SelectedNamespaceChildrenModelView;

  })();

  Encapsule.code.lib.kohelpers.RegisterKnockoutViewTemplate("idKoTemplate_SelectedNamespaceChildrenViewModel", (function() {
    return "<span data-bind=\"if: childModelViews.length\">\n    <div class=\"classONMjsSelectedNamespaceSectionTitle\">Child Namespaces (<span data-bind=\"text: childModelViews.length\"></span>):</div>\n    <div class=\"classONMjsSelectedNamespaceSectionCommon classONMjsSelectedNamespaceChildren\">\n        <span data-bind=\"template: { name: 'idKoTemplate_AddressSelectionLinkViewModel', foreach: childModelViews }\"></span>\n    </div>\n</span>";
  }));

  /*
  ------------------------------------------------------------------------------
  
  The MIT License (MIT)
  
  Copyright (c) 2013 Encapsule Project
    
  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:
  
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  THE SOFTWARE.
  
  **** Encapsule Project :: Build better software with circuit models ****
  
  OPEN SOURCES: http://github.com/Encapsule HOMEPAGE: http://Encapsule.org
  BLOG: http://blog.encapsule.org TWITTER: https://twitter.com/Encapsule
  
  ------------------------------------------------------------------------------
  
  
  
  ------------------------------------------------------------------------------
  */


  namespaceEncapsule = (typeof Encapsule !== "undefined" && Encapsule !== null) && Encapsule || (this.Encapsule = {});

  Encapsule.code = (Encapsule.code != null) && Encapsule.code || (this.Encapsule.code = {});

  Encapsule.code.lib = (Encapsule.code.lib != null) && Encapsule.code.lib || (this.Encapsule.code.lib = {});

  Encapsule.code.lib.onm = (Encapsule.code.lib.onm != null) && Encapsule.code.lib.onm || (this.Encapsule.code.lib.onm = {});

  ONMjs = Encapsule.code.lib.onm;

  ONMjs.observers = (ONMjs.observers != null) && ONMjs.observers || (ONMjs.observers = {});

  ONMjs.observers.SelectedNamespaceCollectionModelView = (function() {

    function SelectedNamespaceCollectionModelView(params_) {
      var index, label, semanticBindings,
        _this = this;
      try {
        this.subcomponentModelViews = [];
        label = params_.selectedNamespaceModel.____label;
        this.namespaceLabel = (label != null) && label || "<no label provided>";
        semanticBindings = params_.cachedAddressStore.referenceStore.model.getSemanticBindings();
        index = 0;
        params_.selectedNamespace.visitExtensionPointSubcomponents(function(address__) {
          var prefix, subcomponentNamespace;
          subcomponentNamespace = params_.cachedAddressStore.referenceStore.openNamespace(address__);
          prefix = "" + (index++ + 1) + ": ";
          label = "" + (subcomponentNamespace.getResolvedLabel()) + "<br>";
          return _this.subcomponentModelViews.push(new ONMjs.observers.helpers.AddressSelectionLinkModelView(prefix, label, address__, params_.cachedAddressStore));
        });
      } catch (exception) {
        throw "ONMjs.observers.SelectedNamespaceCollectionModelView failure: " + exception;
      }
    }

    return SelectedNamespaceCollectionModelView;

  })();

  Encapsule.code.lib.kohelpers.RegisterKnockoutViewTemplate("idKoTemplate_SelectedNamespaceCollectionViewModel", (function() {
    return "<div class=\"classONMjsSelectedNamespaceSectionTitle\">\n<span class=\"class=\"classONMjsAddressSelectionLinkLabelNoLink\" data-bind=\"html: namespaceLabel\"></span>\nSubcomponents (<span data-bind=\"text: subcomponentModelViews.length\"></span>):\n</div>\n<div class=\"classONMjsSelectedNamespaceSectionCommon classONMjsSelectedNamespaceCollection\">\n<span data-bind=\"ifnot: subcomponentModelViews.length\">\n<i><span class=\"classONMjsAddressSelectionLinkLabelNoLink\" data-bind=\"html: namespaceLabel\"></span> extension point is empty.</i>\n</span>\n<span data-bind=\"if: subcomponentModelViews.length\">\n<span class=\"link\" data-bind=\"template: { name: 'idKoTemplate_AddressSelectionLinkViewModel', foreach: subcomponentModelViews }\"></span>\n</span>\n</div>";
  }));

  /*
  ------------------------------------------------------------------------------
  
  The MIT License (MIT)
  
  Copyright (c) 2013 Encapsule Project
    
  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:
  
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  THE SOFTWARE.
  
  **** Encapsule Project :: Build better software with circuit models ****
  
  OPEN SOURCES: http://github.com/Encapsule HOMEPAGE: http://Encapsule.org
  BLOG: http://blog.encapsule.org TWITTER: https://twitter.com/Encapsule
  
  ------------------------------------------------------------------------------
  
  
  
  ------------------------------------------------------------------------------
  */


  namespaceEncapsule = (typeof Encapsule !== "undefined" && Encapsule !== null) && Encapsule || (this.Encapsule = {});

  Encapsule.code = (Encapsule.code != null) && Encapsule.code || (this.Encapsule.code = {});

  Encapsule.code.lib = (Encapsule.code.lib != null) && Encapsule.code.lib || (this.Encapsule.code.lib = {});

  Encapsule.code.lib.onm = (Encapsule.code.lib.onm != null) && Encapsule.code.lib.onm || (this.Encapsule.code.lib.onm = {});

  ONMjs = Encapsule.code.lib.onm;

  ONMjs.observers = (ONMjs.observers != null) && ONMjs.observers || (ONMjs.observers = {});

  ONMjs.observers.SelectedNamespaceComponentModelView = (function() {

    function SelectedNamespaceComponentModelView(params_) {
      var componentAddress, componentNamespace, index,
        _this = this;
      try {
        componentAddress = params_.selectedAddress.createComponentAddress();
        componentNamespace = params_.cachedAddressStore.referenceStore.openNamespace(componentAddress);
        this.extensionPointModelViewArray = [];
        index = 0;
        componentAddress.visitExtensionPointAddresses(function(address_) {
          var extensionPointNamespace, label, noLinkFlag, prefix, subcomponentCount;
          noLinkFlag = address_.isEqual(params_.selectedAddress);
          extensionPointNamespace = params_.cachedAddressStore.referenceStore.openNamespace(address_);
          prefix = void 0;
          if (index++) {
            prefix = " &bull; ";
          }
          label = "" + (extensionPointNamespace.getResolvedLabel());
          subcomponentCount = Encapsule.code.lib.js.dictionaryLength(extensionPointNamespace.data());
          label += " (" + subcomponentCount + ")";
          return _this.extensionPointModelViewArray.push(new ONMjs.observers.helpers.AddressSelectionLinkModelView(prefix, label, address_, params_.cachedAddressStore, {
            noLink: noLinkFlag
          }));
        });
      } catch (exception) {
        throw "ONMjs.observers.SelectedNamespaceComponentModelView failure: " + exception;
      }
    }

    return SelectedNamespaceComponentModelView;

  })();

  Encapsule.code.lib.kohelpers.RegisterKnockoutViewTemplate("idKoTemplate_SelectedNamespaceComponentViewModel", (function() {
    return "\n<span data-bind=\"if: extensionPointModelViewArray.length\">\n    <div class=\"classONMjsSelectedNamespaceSectionTitle\">\n        Extension Points (<span data-bind=\"text: extensionPointModelViewArray.length\"></span>):\n    </div>\n    <span data-bind=\"ifnot: extensionPointModelViewArray.length\"><i>Extension point contains no subcomponents.</i></span>\n    <span data-bind=\"if: extensionPointModelViewArray.length\">\n    <div class=\"classONMjsSelectedNamespaceSectionCommon classONMjsSelectedNamespaceComponent\">\n        <span data-bind=\"template: { name: 'idKoTemplate_AddressSelectionLinkViewModel', foreach: extensionPointModelViewArray }\"></span>\n    </div>\n    </span>\n</span>";
  }));

  /*
  ------------------------------------------------------------------------------
  
  The MIT License (MIT)
  
  Copyright (c) 2013 Encapsule Project
    
  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:
  
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  THE SOFTWARE.
  
  **** Encapsule Project :: Build better software with circuit models ****
  
  OPEN SOURCES: http://github.com/Encapsule HOMEPAGE: http://Encapsule.org
  BLOG: http://blog.encapsule.org TWITTER: https://twitter.com/Encapsule
  
  ------------------------------------------------------------------------------
  
  
  
  ------------------------------------------------------------------------------
  */


  namespaceEncapsule = (typeof Encapsule !== "undefined" && Encapsule !== null) && Encapsule || (this.Encapsule = {});

  Encapsule.code = (Encapsule.code != null) && Encapsule.code || (this.Encapsule.code = {});

  Encapsule.code.lib = (Encapsule.code.lib != null) && Encapsule.code.lib || (this.Encapsule.code.lib = {});

  Encapsule.code.lib.onm = (Encapsule.code.lib.onm != null) && Encapsule.code.lib.onm || (this.Encapsule.code.lib.onm = {});

  ONMjs = Encapsule.code.lib.onm;

  ONMjs.observers = (ONMjs.observers != null) && ONMjs.observers || (ONMjs.observers = {});

  ONMjs.observers.helpers = (ONMjs.observers.helpers != null) && ONMjs.observers.helpers || (ONMjs.observers.helpers = {});

  ONMjs.observers.helpers.AddressSelectionLinkModelView = (function() {

    function AddressSelectionLinkModelView(prefix_, label_, address_, selectorStore_, options_) {
      var options,
        _this = this;
      try {
        this.prefix = (prefix_ != null) && prefix_ || "";
        this.label = (label_ != null) && label_ || "<no label provided>";
        this.address = (address_ != null) && address_ && address_.clone() || (function() {
          throw "Missing address input parameter.";
        })();
        this.selectorStore = (selectorStore_ != null) && selectorStore_ || (function() {
          throw "Missing selector store input parameter.";
        })();
        options = (options_ != null) && options_ || {};
        this.optionsNoLink = (options.noLink != null) && options.noLink || false;
        this.onClick = function() {
          try {
            return _this.selectorStore.setAddress(_this.address);
          } catch (exception) {
            return Console.messageError("ONMjs.observers.helpers.AddressSelectionLinkModelView.onClick failure: " + exception);
          }
        };
      } catch (exception) {
        throw "ONMjs.observers.helpers.AddressSelectionLinkModelView failure: " + exception;
      }
    }

    return AddressSelectionLinkModelView;

  })();

  Encapsule.code.lib.kohelpers.RegisterKnockoutViewTemplate("idKoTemplate_AddressSelectionLinkViewModel", (function() {
    return "<span data-bind=\"if: prefix\"><span class=\"classONMjsAddressSelectionLinkPrefix\" data-bind=\"html: prefix\"></span></span><span data-bind=\"ifnot: optionsNoLink\"><span class=\"classONMjsAddressSelectionLinkLabel classONMjsMouseOverPointer\" data-bind=\"html: label, click: onClick\"></span></span><span data-bind=\"if: optionsNoLink\"><span class=\"classONMjsAddressSelectionLinkLabelNoLink\" data-bind=\"html: label\"></span></span>";
  }));

  ONMjs.observers.helpers.CallbackLinkModelView = (function() {

    function CallbackLinkModelView(prefix_, label_, address_, selectorStore_, options_, callback_) {
      var _this = this;
      try {
        this.prefix = (prefix_ != null) && prefix_ || "";
        this.label = (label_ != null) && label_ || "<no label provided>";
        this.address = (address_ != null) && address_.clone() || void 0;
        this.selectorStore = (selectorStore_ != null) && selectorStore_ || void 0;
        this.options = (options_ != null) && options_ || {};
        this.optionsNoLink = (this.options.noLink != null) && this.options.noLink || false;
        this.optionsStyleClass = (this.options.styleClass != null) && this.options.styleClass || void 0;
        this.callback = callback_;
        this.onClick = function() {
          try {
            if (!((_this.callback != null) && _this.callback)) {
              throw "Internal error: Did you construct this callback link with a valid callback function?";
            }
            return _this.callback(_this.prefix, _this.label, _this.address, _this.selectorStore, _this.options);
          } catch (exception) {
            return Console.messageError("ONMjs.observers.helpers.CallbackLinkModelView.onClick failure: " + exception);
          }
        };
      } catch (exception) {
        throw "ONMjs.observers.helpers.CallbackLinkModelView failure: " + exception;
      }
    }

    return CallbackLinkModelView;

  })();

  Encapsule.code.lib.kohelpers.RegisterKnockoutViewTemplate("idKoTemplate_CallbackLinkViewModel", (function() {
    return "<span class=\"classONMjsCallbackLink\">\n    <span data-bind=\"if: prefix\"><span class=\"prefix\" data-bind=\"html: prefix\"></span></span>\n    <span data-bind=\"ifnot: optionsNoLink\">\n        <span class=\"link classONMjsMouseOverPointer\" data-bind=\"html: label, click: onClick, css: optionsStyleClass\"></span>\n    </span>\n    <span data-bind=\"if: optionsNoLink\">\n        <span class=\"nolink\" data-bind=\"html: label, css: optionsStyleClass\"></span>\n    </span>\n</span>";
  }));

  /*
  ------------------------------------------------------------------------------
  
  The MIT License (MIT)
  
  Copyright (c) 2013 Encapsule Project
    
  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:
  
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  THE SOFTWARE.
  
  **** Encapsule Project :: Build better software with circuit models ****
  
  OPEN SOURCES: http://github.com/Encapsule HOMEPAGE: http://Encapsule.org
  BLOG: http://blog.encapsule.org TWITTER: https://twitter.com/Encapsule
  
  ------------------------------------------------------------------------------
  
  
  
  ------------------------------------------------------------------------------
  */


  namespaceEncapsule = (typeof Encapsule !== "undefined" && Encapsule !== null) && Encapsule || (this.Encapsule = {});

  Encapsule.code = (Encapsule.code != null) && Encapsule.code || (this.Encapsule.code = {});

  Encapsule.code.lib = (Encapsule.code.lib != null) && Encapsule.code.lib || (this.Encapsule.code.lib = {});

  Encapsule.code.lib.onm = (Encapsule.code.lib.onm != null) && Encapsule.code.lib.onm || (this.Encapsule.code.lib.onm = {});

  ONMjs = Encapsule.code.lib.onm;

  ONMjs.observers = (ONMjs.observers != null) && ONMjs.observers || (ONMjs.observers = {});

  ONMjs.observers.SelectedNamespaceImmutablePropertiesModelView = (function() {

    function SelectedNamespaceImmutablePropertiesModelView(params_) {
      var dataReference, members, name, namespaceDeclarationImmutable, namespaceModelProperties, propertyDescriptor;
      try {
        this.propertyModelViews = [];
        namespaceModelProperties = params_.selectedAddress.getPropertiesModel();
        if (!((namespaceModelProperties != null) && namespaceModelProperties)) {
          throw "Cannot resolve namespace properties declaration for selection.";
        }
        namespaceDeclarationImmutable = (namespaceModelProperties.userImmutable != null) && namespaceModelProperties.userImmutable || void 0;
        if (!((namespaceDeclarationImmutable != null) && namespaceDeclarationImmutable)) {
          return;
        }
        dataReference = params_.selectedNamespace.data();
        for (name in namespaceDeclarationImmutable) {
          members = namespaceDeclarationImmutable[name];
          propertyDescriptor = {
            immutable: true,
            declaration: {
              property: name,
              members: members
            },
            store: {
              value: dataReference[name]
            }
          };
          this.propertyModelViews.push(propertyDescriptor);
        }
      } catch (exception) {
        throw "ONMjs.observers.SelectedNamespaceImmutablePropertiesModelView failure: " + exception;
      }
    }

    return SelectedNamespaceImmutablePropertiesModelView;

  })();

  Encapsule.code.lib.kohelpers.RegisterKnockoutViewTemplate("idKoTemplate_SelectedNamespaceImmutablePropertiesViewModel", (function() {
    return "<div class=\"classONMjsSelectedNamespaceSectionTitle\">\n    Immutable Properties (<span data-bind=\"text: propertyModelViews.length\"></span>):\n</div>\n<div class=\"classONMjsSelectedNamespaceSectionCommon\">\n    <span data-bind=\"if: propertyModelViews.length\">\n        <div class=\"classONMjsSelectedNamespacePropertiesCommon classONMjsSelectedNamespacePropertiesImmutable\">\n            <span data-bind=\"foreach: propertyModelViews\">\n                <div class=\"name\"><span class=\"immutable\" data-bind=\"text: declaration.property\"></span></div>\n                <div class=\"type\" data-bind=\"text: declaration.members.____type\"></div>\n                <div class=\"value\"><span class=\"immutable\" data-bind=\"text: store.value\"></span></div>\n                <div style=\"clear: both;\" />\n            </span>\n        </div>\n    </span>\n    <span data-bind=\"ifnot: propertyModelViews.length\">\n        <i>This namespace has no immutable properties.</i>\n    </span>\n</div>";
  }));

  ONMjs.observers.SelectedNamespaceMutablePropertiesModelView = (function() {

    function SelectedNamespaceMutablePropertiesModelView(params_) {
      var label, members, name, namespaceDeclarationMutable, namespaceModelProperties, propertyDescriptor,
        _this = this;
      try {
        this.propertyModelViews = [];
        this.namespace = params_.selectedNamespace;
        namespaceModelProperties = params_.selectedAddress.getPropertiesModel();
        if (!((namespaceModelProperties != null) && namespaceModelProperties)) {
          throw "Cannot resolve namespace properties declaration for selection.";
        }
        namespaceDeclarationMutable = (namespaceModelProperties.userMutable != null) && namespaceModelProperties.userMutable || void 0;
        if (!((namespaceDeclarationMutable != null) && namespaceDeclarationMutable)) {
          return;
        }
        this.dataReference = params_.selectedNamespace.data();
        this.onClickUpdateProperties = function(prefix_, label_, addres_, selectorStore_, options_) {
          var propertiesUpdated, propertyModelView, valueEdit, _i, _len, _ref;
          try {
            propertiesUpdated = false;
            _ref = _this.propertyModelViews;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              propertyModelView = _ref[_i];
              valueEdit = propertyModelView.store.valueEdit();
              if (propertyModelView.store.value !== valueEdit) {
                _this.dataReference[propertyModelView.declaration.property] = valueEdit;
                propertiesUpdated = true;
              }
            }
            if (propertiesUpdated) {
              return _this.namespace.update();
            }
          } catch (exception) {
            throw "ONMjs.observer.SelectedNamespaceMutablePropertiesModelView.onClickUpdateProperties failure: " + exception;
          }
        };
        label = (params_.selectedNamespaceModel.____label != null) && params_.selectedNamespaceModel.____label || "<no label defined>";
        this.updateLinkModelView = new ONMjs.observers.helpers.CallbackLinkModelView("", "Apply " + label + " Edit", void 0, void 0, {
          styleClass: "classONMjsActionButtonConfirm"
        }, this.onClickUpdateProperties);
        this.onClickDiscardPropertyEdits = function(prefix_, label_, address_, selectorStore_, options_) {
          var propertyModelView, _i, _len, _ref, _results;
          try {
            _ref = _this.propertyModelViews;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              propertyModelView = _ref[_i];
              _results.push(propertyModelView.store.valueEdit(propertyModelView.store.value));
            }
            return _results;
          } catch (exception) {
            throw "ONMjs.observer.SelectedNamespaceMutablePropertiesModelView.onClickDiscardPropertyEdits failure: " + exception;
          }
        };
        this.discardLinkModelView = new ONMjs.observers.helpers.CallbackLinkModelView("", "Discard " + label + " Edits", void 0, void 0, {
          styleClass: "classONMjsActionButtonCancel"
        }, this.onClickDiscardPropertyEdits);
        for (name in namespaceDeclarationMutable) {
          members = namespaceDeclarationMutable[name];
          propertyDescriptor = {
            immutable: false,
            declaration: {
              property: name,
              members: members
            },
            store: {
              value: this.dataReference[name],
              valueEdit: ko.observable(this.dataReference[name])
            }
          };
          this.propertyModelViews.push(propertyDescriptor);
        }
        this.propertiesUpdated = ko.computed(function() {
          var propertiesUpdated, propertyModelView, valueEdit, _i, _len, _ref;
          propertiesUpdated = false;
          _ref = _this.propertyModelViews;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            propertyModelView = _ref[_i];
            valueEdit = propertyModelView.store.valueEdit();
            if (propertyModelView.store.value !== valueEdit) {
              propertiesUpdated = true;
            }
          }
          return propertiesUpdated;
        });
      } catch (exception) {
        throw "ONMjs.observers.SelectedNamespaceMutablePropertiesModelView failure: " + exception;
      }
    }

    return SelectedNamespaceMutablePropertiesModelView;

  })();

  Encapsule.code.lib.kohelpers.RegisterKnockoutViewTemplate("idKoTemplate_SelectedNamespaceMutablePropertiesViewModel", (function() {
    return "<div class=\"classONMjsSelectedNamespaceSectionTitle\">\n    Mutable Properties (<span data-bind=\"text: propertyModelViews.length\"></span>):\n</div>\n<div class=\"classONMjsSelectedNamespaceSectionCommon\">\n    <span data-bind=\"if: propertyModelViews.length\">\n        <div class=\"classONMjsSelectedNamespacePropertiesCommon classONMjsSelectedNamespacePropertiesMutable\">\n            <span data-bind=\"foreach: propertyModelViews\">\n                <div class=\"name\" data-bind=\"text: declaration.property\"></div>\n                <div class=\"type\" data-bind=\"text: declaration.members.____type\"></div>\n                <div style=\"clear: both;\" />\n                <div type=\"text\" class=\"value\" contentEditable=\"true\" data-bind=\"editableText: store.valueEdit\"></div>\n            </span>\n            <span data-bind=\"if: propertiesUpdated\">\n                <div class=\"buttons\">\n                    <span data-bind=\"with: discardLinkModelView\"><span data-bind=\"template: { name: 'idKoTemplate_CallbackLinkViewModel' }\"></span></span>\n                    <span data-bind=\"with: updateLinkModelView\"><span data-bind=\"template: { name: 'idKoTemplate_CallbackLinkViewModel' }\"></span></span>\n                </div>\n            </span>\n        </div>\n    </span>\n    <span data-bind=\"ifnot: propertyModelViews.length\">\n        <i>This namespace has no mutable properties.</i>\n    </span>\n</div>";
  }));

  /*
  ------------------------------------------------------------------------------
  
  The MIT License (MIT)
  
  Copyright (c) 2013 Encapsule Project
    
  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:
  
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  THE SOFTWARE.
  
  **** Encapsule Project :: Build better software with circuit models ****
  
  OPEN SOURCES: http://github.com/Encapsule HOMEPAGE: http://Encapsule.org
  BLOG: http://blog.encapsule.org TWITTER: https://twitter.com/Encapsule
  
  ------------------------------------------------------------------------------
  
  
  
  ------------------------------------------------------------------------------
  */


  namespaceEncapsule = (typeof Encapsule !== "undefined" && Encapsule !== null) && Encapsule || (this.Encapsule = {});

  Encapsule.code = (Encapsule.code != null) && Encapsule.code || (this.Encapsule.code = {});

  Encapsule.code.lib = (Encapsule.code.lib != null) && Encapsule.code.lib || (this.Encapsule.code.lib = {});

  Encapsule.code.lib.onm = (Encapsule.code.lib.onm != null) && Encapsule.code.lib.onm || (this.Encapsule.code.lib.onm = {});

  ONMjs = Encapsule.code.lib.onm;

  ONMjs.observers = (ONMjs.observers != null) && ONMjs.observers || (ONMjs.observers = {});

  ONMjs.observers.SelectedNamespaceTitleModelView = (function() {

    function SelectedNamespaceTitleModelView(params_) {
      var componentAddress, componentDescriptor, componentLabelResolved, componentNamespace, componentPathId, componentSelector, displayComponent, displayExtensionPoint, extensionPointAddress, extensionPointLabel, extensionPointModel, label, namespaceType;
      try {
        this.namespaceLabelResolved = params_.selectedNamespace.getResolvedLabel();
        this.namespaceDescription = (params_.selectedNamespaceModel.____description != null) && params_.selectedNamespaceModel.____description || "<no description provided>";
        displayComponent = false;
        componentPathId = void 0;
        componentSelector = void 0;
        componentLabelResolved = void 0;
        this.componentSuffixString = void 0;
        displayExtensionPoint = false;
        extensionPointLabel = void 0;
        this.contextLinkModelViewComponent = void 0;
        this.contextLinkModelViewExtensionPoint = void 0;
        componentAddress = void 0;
        componentDescriptor = void 0;
        extensionPointAddress = void 0;
        namespaceType = params_.selectedAddress.getModel().namespaceType;
        if (!(namespaceType === "root")) {
          displayComponent = true;
          if (params_.selectedNamespaceModel.namespaceType !== "component") {
            componentAddress = params_.selectedAddress.createComponentAddress();
          } else {
            extensionPointAddress = params_.selectedAddress.createParentAddress();
            componentAddress = extensionPointAddress.createComponentAddress();
          }
          componentNamespace = params_.objectStore.openNamespace(componentAddress);
          componentLabelResolved = componentNamespace.getResolvedLabel();
          this.componentSuffixString = (componentAddress.getModel().namespaceType !== "root" && ":") || "::";
          this.componentClickableLink = new ONMjs.observers.helpers.AddressSelectionLinkModelView("", componentLabelResolved, componentAddress, params_.cachedAddressStore);
        }
        if (namespaceType === "component") {
          displayExtensionPoint = true;
          if (!((extensionPointAddress != null) && extensionPointAddress)) {
            extensionPointAddress = params_.selectedAddress.createParentAddress();
          }
          extensionPointModel = extensionPointAddress.getModel();
          label = (extensionPointModel.____label != null) && extensionPointModel.____label || "<no label defined>";
          this.extensionPointClickableLink = new ONMjs.observers.helpers.AddressSelectionLinkModelView("", label, extensionPointAddress, params_.cachedAddressStore);
        }
        this.templateName = void 0;
        if (!displayComponent) {
          this.templateName = "idKoTemplate_SelectedNamespaceTitleRootViewModel";
        } else if (!displayExtensionPoint) {
          this.templateName = "idKoTemplate_SelectedNamespaceTitleExtensionPointViewModel";
        } else {
          this.templateName = "idKoTemplate_SelectedNamespaceTitleComponentViewModel";
        }
      } catch (exception) {
        throw "ONMjs.observers.ObjectModelNavigatorNamespaceTitle failure: " + exception;
      }
    }

    return SelectedNamespaceTitleModelView;

  })();

  Encapsule.code.lib.kohelpers.RegisterKnockoutViewTemplate("idKoTemplate_SelectedNamespaceTitleRootViewModel", (function() {
    return "<span class=\"selected\" data-bind=\"html: namespaceLabelResolved\"></span>";
  }));

  Encapsule.code.lib.kohelpers.RegisterKnockoutViewTemplate("idKoTemplate_SelectedNamespaceTitleExtensionPointViewModel", (function() {
    return "<span data-bind=\"with: componentClickableLink\"><span data-bind=\"template: { name: 'idKoTemplate_AddressSelectionLinkViewModel' }\"></span></span>\n<span class=\"separator\" data-bind=\"html: componentSuffixString\"></span>\n<span class=\"selected\" data-bind=\"html: namespaceLabelResolved\"></span>";
  }));

  Encapsule.code.lib.kohelpers.RegisterKnockoutViewTemplate("idKoTemplate_SelectedNamespaceTitleComponentViewModel", (function() {
    return "<span data-bind=\"with: componentClickableLink\"><span data-bind=\"template: { name: 'idKoTemplate_AddressSelectionLinkViewModel' }\"></span></span>\n<span class=\"separator\" data-bind=\"html: componentSuffixString\"></span>\n<span data-bind=\"with: extensionPointClickableLink\"><span data-bind=\"template: { name: 'idKoTemplate_AddressSelectionLinkViewModel' }\"></span></span>\n<span class=\"separator\"> / </span>\n<span class=\"selected\" data-bind=\"html: namespaceLabelResolved\"></span>";
  }));

  Encapsule.code.lib.kohelpers.RegisterKnockoutViewTemplate("idKoTemplate_SelectedNamespaceTitleViewModel", (function() {
    return "<div class=\"classONMjsSelectedNamespaceTitle\">\n    <span class=\"classONMjsSelectedNamespaceTitleLinks\" data-bind=\"template: { name: function () { return templateName; } }\" ></span>\n    <div class=\"description\" data-bind=\"html: namespaceDescription\"></div>\n</div>";
  }));

}).call(this);
